const Generator=require("yeoman-generator"),chalk=require("chalk"),path=require("path"),pluralize=require("pluralize"),fs=require("fs"),yaml=require("js-yaml"),startCase=require("lodash.startcase"),basePath=require("../../config.js").basePath,readYml=(schema,schemaFolder)=>{const folderPath=path.join(basePath,schemaFolder,"schema"),filePath=`${folderPath}\\${schema}.yml`;try{const data=fs.readFileSync(filePath,"utf8");try{const properties=yaml.loadAll(data);return properties[0].properties}catch(err){console.error(err)}}catch(err){console.error(err)}};module.exports=class extends Generator{constructor(args,opts){super(args,opts),this.argument("schema",{type:String,required:!0}),this.argument("schemaFolder",{type:String,required:!0}),this.argument("outputLogicFolder",{type:String,required:!0}),this.argument("outputThemeFolder",{type:String,required:!0}),this.argument("outputTheme",{type:String,required:!0});const properties=readYml(this.options.schema,this.options.schemaFolder),attributes=properties.map(attr=>({name:attr.name,nameHuman:startCase(attr.name),type:attr.type})),options=this.options;if(this.options.outputLogicFolderLocation=this.options.outputLogicFolder,this.options.outputThemeFolderLocation=this.options.outputThemeFolder,options.schmea="app"){const optionalPublicFolder="/public";this.options.outputLogicFolderLocation+=optionalPublicFolder,this.options.outputThemeFolderLocation+=optionalPublicFolder}this.props={modelName:this.options.schema,modelNamePlural:pluralize(this.options.schema),attributes:attributes,options:options,graphqlArgumentMap:{string:"String",text:"String",integer:"Int",boolean:"Boolean",float:"Float",date:"String",datetime:"String",array:"[String]",upload:"String"},graphqlArgumentValueMap:{string:"value",text:"value",integer:"value_int",boolean:"value_boolean",float:"value_float",date:"value",datetime:"value",array:"value_array",upload:"value"},graphqlPropertyMap:{string:"property",text:"property",integer:"property_int",boolean:"property_boolean",float:"property_float",date:"property",datetime:"property",array:"property_array",upload:"property_upload"},formFieldTypeMap:{string:"text",text:"date",integer:"number",boolean:"text",float:"text",date:"text",datetime:"text",array:"text",upload:"text"},liquidTagMap:{integer:" | times: 1"}}}writing(){try{this.fs.copyTpl(this.templatePath("./graphql/*.graphql"),this.destinationPath(`${basePath}/${this.options.outputLogicFolderLocation}/graphql/${this.props.modelNamePlural}/`),this.props),this.fs.copyTpl(this.templatePath("./views/partials/lib/queries/model"),this.destinationPath(`${basePath}/${this.options.outputLogicFolderLocation}/views/partials/queries/${this.props.modelNamePlural}`),this.props),this.fs.copyTpl(this.templatePath("./views/partials/lib/commands/model"),this.destinationPath(`${basePath}/${this.options.outputLogicFolderLocation}/views/partials/commands/${this.props.modelNamePlural}`),this.props),this.fs.copyTpl(this.templatePath("./views/pages/model"),this.destinationPath(`${basePath}/${this.options.outputThemeFolderLocation}/views/pages/${this.props.modelNamePlural}`),this.props),this.fs.copyTpl(this.templatePath("./views/partials/theme/simple/model"),this.destinationPath(`${basePath}/${this.options.outputThemeFolderLocation}/views/partials/${this.options.outputTheme}/${this.props.modelNamePlural}`),this.props),this.fs.copyTpl(this.templatePath("./translations/model.yml"),this.destinationPath(`${basePath}/${this.options.outputThemeFolderLocation}/translations/${this.options.outputTheme}/${this.props.modelNamePlural}.yml`),this.props)}catch(e){console.error(e)}}install(){}end(){console.log(chalk.green("CRUD generated"))}};